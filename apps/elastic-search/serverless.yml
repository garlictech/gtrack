service: gtrack-geosearch

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  defaultStage: staging
  stage: ${opt:stage, self:provider.defaultStage}

  pythonRequirements:
    dockerizePip: true

custom:
  parameters:
    esInstanceType:
      dev: t2.small.elasticsearch
      staging: t2.small.elasticsearch
      master: t2.small.elasticsearch
  esInstanceType: ${self:custom.parameters.esInstanceType.${self:provider.stage}}

  awsAccountId: 697486207432
  esRoleName: AppSyncServiceRole
  esDomainName: gtrack-${self:provider.stage}
  esGeoIndex: places
  esGeoMappingFile: geosearch/location_geopoint_mapping.json
  esEndpoint: { Fn::GetAtt: [ElasticSearchInstance, DomainEndpoint] }

plugins:
  - serverless-appsync-plugin
  - serverless-python-requirements

functions:
  elasticsearchGeoMapping:
    handler: geosearch/elasticsearch_geomapping.handler
    name: elasticsearchGeoMapping-${self:provider.stage}
    description: Creates geo mapping in Elasticsearch
    timeout: 10 # optional, default is 6
    role: esGeoLambdaServiceRole
    environment:
      ES_ENDPOINT: ${self:custom.esEndpoint}
      ES_INDEX: ${self:custom.esGeoIndex}
      ES_GEO_MAPPING_FILE: ${self:custom.esGeoMappingFile}
      ES_REGION: ${self:provider.region}

resources:
  Resources:
    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: 6.2
        DomainName: '${self:custom.esDomainName}'
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: ${self:custom.esInstanceType}
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false

    esGeoLambdaServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: esGeoLambdaServiceRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: esGeoLambdaServiceRolePolicy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group~:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 'es:*'
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:aws:es:'
                          - Ref: 'AWS::Region'
                          - ':'
                          - Ref: 'AWS::AccountId'
                          - ':domain/'
                          - '${self:custom.esDomainName}'
                          - '/*'
